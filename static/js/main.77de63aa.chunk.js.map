{"version":3,"sources":["styles/Mixin.tsx","styles/index.tsx","components/Header.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["flexCenterRow","css","flexCenterColumn","theme","color","text","primaryText","secondaryText","divider","primary","lightPrimary","darkPrimary","accentColor","disabled","idle","pending","running","success","error","zIndex","logo","fab","modal","fontSize","header","content","font","title","subtitle","code","Global","createGlobalStyle","p","Separator","styled","div","width","height","Text","span","Header","Footer","footer","year","Date","getFullYear","App","href","repository","target","rel","version","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.77de63aa.chunk.js","sourcesContent":["import { css } from 'styled-components/macro';\r\nexport const flexCenterRow = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const flexCenterColumn = css`\r\n  ${flexCenterRow}\r\n  flex-direction: column;\r\n`;\r\n","import styled, { createGlobalStyle } from 'styled-components/macro'\r\nimport { DefaultTheme } from 'styled-components'\r\nimport { flexCenterColumn } from './Mixin';\r\n\r\nexport const theme: DefaultTheme = {\r\n  color: {\r\n    text: '#FFFFFF',\r\n    primaryText: '#212121',\r\n    secondaryText: '#757575',\r\n\r\n    divider: '#BDBDBD',\r\n\r\n    primary: '#9C27B0',\r\n    lightPrimary: '#E1BEE7',\r\n    darkPrimary: '#7B1FA2',\r\n    accentColor: '#7C4DFF',\r\n    \r\n    disabled: '#aaa',\r\n\r\n    idle: '#bc7eb6',\r\n    pending: '#E7AB48',\r\n    running: '#3772FF',\r\n    success: '#16b50c',\r\n    error: '#b00020'\r\n  },\r\n\r\n  zIndex: {\r\n    logo: 1000,\r\n    fab: 1200,\r\n    modal: 1500\r\n  },\r\n\r\n  fontSize: {\r\n    header: 3,\r\n  },\r\n\r\n  content: {\r\n    \r\n  },\r\n\r\n  font: {\r\n    title: '',\r\n    subtitle: '',\r\n    text:\r\n      \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen','Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',sans-serif\",\r\n    code: \"'Source Code Pro', monospace\"\r\n  }\r\n}\r\n\r\nexport const Global = createGlobalStyle`\r\n  html,\r\n  body,\r\n  #root {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    user-select: none;\r\n    font-family: ${p => p.theme.font.text};\r\n\r\n    ${flexCenterColumn};\r\n  }\r\n\r\n  a {\r\n    color: ${p => p.theme.color.primary};\r\n    text-decoration: none;\r\n  }\r\n\r\n  a:visited {\r\n    color: ${p => p.theme.color.accentColor};\r\n  }\r\n\r\n  a:hover,\r\n  a:visited:hover {\r\n    color: ${p => p.theme.color.darkPrimary};\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 9px;\r\n    height: 9px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: ${p => p.theme.color.primary};\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${p => p.theme.color.darkPrimary};\r\n  }\r\n`\r\n\r\nexport const Separator = styled.div<SeparatorProps>`\r\n  width: ${p => p.width || 0}em;\r\n  height: ${p => p.height || 0}em;\r\n`\r\n\r\nexport const Text = styled.span<ColorProps & { fontSize?: string }>`\r\n  color: ${p => (p.color ? p.theme.color[p.color] : p.theme.color.primary)};\r\n  font-size: ${p => p.fontSize || '1em'};\r\n`\r\n","import styled from 'styled-components/macro'\r\nimport { flexCenterColumn } from '../styles/Mixin'\r\n\r\nexport const Header = styled.header`\r\n  ${flexCenterColumn}\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background: ${p => p.theme.color.primary};\r\n  color: ${p => p.theme.color.text};\r\n\r\n  font-size: ${p => p.theme.fontSize.header}em;\r\n  font-weight: 100;\r\n`\r\n","import styled from 'styled-components/macro'\r\nimport { flexCenterRow } from '../styles/Mixin'\r\n\r\nexport const Footer = styled.footer`\r\n  ${flexCenterRow}\r\n  height: 3em;\r\n  width: 100vw;\r\n`\r\n","import React from 'react'\r\n\r\nimport { hot } from 'react-hot-loader/root'\r\nimport { ThemeProvider } from 'styled-components/macro'\r\nimport { theme, Global, Separator } from './styles'\r\n\r\nimport { Header } from 'components/Header'\r\nimport { Footer } from 'components/Footer'\r\n\r\nimport { Text } from 'styles'\r\n\r\nimport { version, repository } from '../package.json'\r\n\r\nconst date = new Date()\r\nconst year = date.getFullYear()\r\n\r\nconst App: React.FC = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <>\r\n      <Global />\r\n      <Header>Hi</Header>\r\n      <Footer>\r\n        <Text color=\"primary\">Â© {year} L</Text> <Separator width={0.5} />\r\n        <Separator width={0.5} />\r\n        <a\r\n          href={`https://github.com/${repository}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          https://github.com/{repository}@{version}\r\n        </a>\r\n      </Footer>\r\n    </>\r\n  </ThemeProvider>\r\n)\r\n\r\nexport default hot(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}